install.packages("revealjs")
install.packages("highcharter")
install.packages("tidyverse", lib="D:/R-3.6.1/library")
install.packages("gapminder", lib="D:/R-3.6.1/library")
install.packages("gridExtra", lib="D:/R-3.6.1/library")
library(tidyverse)
install.packages("ggrepel", lib="D:/R-3.6.1/library")
install.packages("ggplotAssist", lib="D:/R-3.6.1/library")
install.packages('tidyverse')
?install.packages
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("tidyverse", lib="D:/R-3.6.1/library")
library(tidyverse)
str(tidyverse)
download.file(https://raw.githubusercontent.com/rstudio/EDAWR/master/data-raw/storms.csv, "storms.csv", mode = "wb")
download.file('raw.githubusercontent.com/rstudio/EDAWR/master/data-raw/storms.csv', "storms.csv", mode = "wb")
download.file('https://raw.githubusercontent.com/rstudio/EDAWR/master/data-raw/storms.csv', "storms.csv", mode = "wb")
install.packages("kableExtra", lib="D:/R-3.6.1/library")
storms <- read.csv('storms.csv', header = T)
storms
?arrange()
arrange(mtcars, cyl, disp)
arrange(mtcars, cyl)
storms
pollution
pollution <- read.csv("https://raw.githubusercontent.com/rstudio/EDAWR/master/data-raw/pollution.csv")
pollution
storms
# Ejemplo 2 #
library(readxl)
encuesta <- read_excel("encuesta.xlsx")
storms  <- read.csv('storms.csv')
storms %>%
filter(pressure >= 1010, wind < 50) %>%
summarise(promedio = mean(wind), sd = sd(wind))
storms %>%
filter(pressure >= 1010, wind < 50)
# 3
storms %>%
select(-pressure) %>%
arrange(desc(date))
numeros  <- read_excel('numeros.xlsx')
numeros  <- read_excel('numeros.xlsx')
numeros %>%
group_by(region) %>%
summarise(min = min(valor), max = max(valor))
?seq
# Actividad 1 #
impares <- seq(1, by = 2, length.out = 1000)
impares
subset <- impares(c(1,10,100,1000))
subset <- impares[c(1,10,100,1000)]
# Actividad 1 #
impares <- seq(1, by = 2, length.out = 1000)
subset <- impares[c(1,10,100,1000)]
subset %>%
sqrt() %>%
sum()
sum(sqrt(subset))
# Actividades Clase 1 #
library(tidyverse)
# Actividad 1 #
impares <- seq(1, by = 2, length.out = 1000)
subset <- impares[c(1,10,100,1000)]
subset %>%
sqrt() %>%
sum()
sum(sqrt(subset))
Encuesta <- read_excel('encuesta.xlsx')
Encuesta2 <- Encuesta %>%
select(P3,P8,P9,P154,P156) %>%
filter(P9 == "Hombre", P3 == "Región de Valparaíso") %>%
arrange(P8) %>%
mutate(PRSC = P156/max(P156)) %>%
group_by(P154) %>%
summarise(mean(PRSC))
Encuesta %>%
select(P3,P8,P9,P154,P156) %>%
filter(P9 == "Hombre", P3 == "Región de Valparaíso") %>%
arrange(P8) %>%
mutate(PRSC = P156/max(P156)) %>%
group_by(P154) %>%
summarise(mean(PRSC))
numeros  <- read_excel('Clase 1/data/numeros.xlsx')
url  <- 'https://raw.githubusercontent.com/rstudio/EDAWR/master/data-raw/storms.csv'
download.file(url, "storms.csv", mode = "wb")
library(readr)
storms <- read.csv('Clase 1/data/storms.csv', header = T)
storms
storms <- read.csv('Clase 1/data/storms.csv', header = T)
numeros <- read_excel('Clase 1/data/numeros.xlsx')
# install.packages('tidyverse')
library(tidyverse)
numeros <- read_excel('Clase 1/data/numeros.xlsx')
numeros
setwd("G:/Mi unidad/Universidad/Cursos/Computación Estadística con R")
library(readxl)
numeros <- read_excel('Clase 1/data/numeros.xlsx')
numeros
setwd("G:/Mi unidad/Universidad/Cursos/Computación Estadística con R/Clase1/Scripts")
10+11
sad
10+11
# CTRL + SHIFT + R
data1 <- tibble(
nombre = c("Rubén", "Teresa", "Axel", "Pamela"),
apellido = c("Fuentes", "Martinez", "Baeza", "Gonzalez"),
valor = c(1, 2, NA, 4)
)
data2 <- tibble(
nombre = c("Rubén", "Teresa", "Axel", "Pamela", "Pamela"),
lastname = c("Kunst", "Martines", "Baeza", "Gonzalez", "Jimenez"),
valor2 = c(100, 200, 300, 400, 500)
)
# left_join ---------------------------------------------------------------
# Definicion: deja fija la de la izquierda (la principal)
# y pega lo que exista en la segunda
datat <- left_join(data1, data2, by = c("nombre", "apellido" = "lastname"))
# CTRL + SHIFT + R
data1 <- tibble(
nombre = c("Rubén", "Teresa", "Axel", "Pamela"),
apellido = c("Fuentes", "Martinez", "Baeza", "Gonzalez"),
valor = c(1, 2, NA, 4)
)
library(tidyverse)
# CTRL + SHIFT + R
data1 <- tibble(
nombre = c("Rubén", "Teresa", "Axel", "Pamela"),
apellido = c("Fuentes", "Martinez", "Baeza", "Gonzalez"),
valor = c(1, 2, NA, 4)
)
data2 <- tibble(
nombre = c("Rubén", "Teresa", "Axel", "Pamela", "Pamela"),
lastname = c("Soza", "Martines", "Baeza", "Gonzalez", "Jimenez"),
valor2 = c(100, 200, 300, 400, 500)
)
# A lo inocente sin especificar el "by"
full_join(data1, data2)
full_join(data1, data2, by = c("nombre", "apellido" = "lastname"))
# inner_join --------------------------------------------------------------
# Definicion: déjame solo lo que parea
# (a mi me gusta match)
inner_join(data1, data2, by = c("nombre", "apellido" = "lastname"))
# left_join ---------------------------------------------------------------
# Definicion: deja fija la de la izquierda (la principal)
# y pega lo que exista en la segunda
datat <- left_join(data1, data2, by = c("nombre", "apellido" = "lastname"))
datat
datat %>%
mutate(valor2_desc = valor2 == 400)
datat %>%
mutate(valor2_desc = ifelse(valor2 == 400, "YAY!", "Aww"))
datat %>%
mutate(es_na_valor2 = is.na(valor2))
datat %>%
mutate(es_na_valor2 = ifelse(is.na(valor2), "es NA", "no es NA"))
datat %>%
mutate(valor = ifelse(is.na(valor), 0, valor))
datat %>%
mutate(valor = ifelse(is.na(valor), 0, valor))
data("table4a")
table4a
table4a %>%
mutate(promedio = (`1999` + `2000`)/2)
table4a %>%
gather(anios, casos, `1999`, `2000`)
# el menos se interpreta, como TODO menos, lo que tenga menos
table4a %>%
gather(anios, casos, -country)
?gather
table4a %>%
gather(anios, casos, `1999`, `2000`)
table4a
data1 %>% left_join(data2, by = "nombre")
table4a %>%
gather(anios, casos, -country) %>%
group_by(country) %>%
summarise(promedio = mean(casos)) %>%
left_join(table4a)
table4a <- table4a %>%
mutate(
`2001` = c(123,3453,234),
`2002` = c(78678,3423,456)
)
table4a
table4a %>%
mutate(promedio = (`1999` + `2000` + `2001` + `2002`)/4)
table4a %>%
gather(anios, casos, `1999`, `2000`)
# el menos se interpreta, como TODO menos, lo que tenga menos
table4a %>%
gather(anios, casos, -country)
table4a %>%
gather(anios, casos, -country) %>%
group_by(country) %>%
summarise(promedio = mean(casos))
data1 %>% left_join(data2, by = "nombre")
table4a %>%
gather(anios, casos, -country) %>%
group_by(country) %>%
summarise(promedio = mean(casos)) %>%
left_join(table4a)
library(gapminder)
data(gapminder)
paises <- gapminder %>%
filter(year == max(year))
paises
# Carga y limpieza de datos -----------------------------------------------
data <- read_delim(url("https://tinyurl.com/data-metro-scl"), delim = ";")
data
View(data)
# Esto elimina todas los paraderos que contentan algo de la forma numero-numero:
# L-30-51-80-SN
data <- data %>%
filter(!str_detect(paraderosubida, "[0-9]+-[0-9]"))
data
# Carga y limpieza de datos -----------------------------------------------
data <- read_delim(url("https://tinyurl.com/data-metro-scl"), delim = ";")
head(data)
View(data)
# Esto elimina todas los paraderos que contentan algo de la forma numero-numero:
# L-30-51-80-SN
data <- data %>%
filter(!str_detect(paraderosubida, "[0-9]+-[0-9]"))
data
View(data)
# Carga y limpieza de datos -----------------------------------------------
data <- read_delim(url("https://tinyurl.com/data-metro-scl"), delim = ";")
data
factor(data$paraderosubida
)
data %>%
filter(str_detect(paraderosubida, "[0-9]+-[0-9]"))
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
# Esto elimina todas los paraderos que contentan algo de la forma numero-numero:
# L-30-51-80-SN
data <- data %>%
filter(!str_detect(paraderosubida, "[0-9]+-[0-9]"))
View(data)
# Todas las estaciones distintas de "-"
data <- data %>%
filter(paraderosubida != "-")
# Y consideramos solamente los registros que
data <- data %>%
filter(hour(mediahora) > 0)
head(data)
hour(data$mediahora)
# lubridate para manipular fechas/horas
library(lubridate)
hour(data$mediahora)
# Renombramos paraderosubida a estacion pues consideramos solamente
# estaciones de metro
data <- data %>%
rename(estacion = paraderosubida)
glimpse(data)
# Podríamos hacer un gráfico de subidad y media hora
ggplot(data) +
geom_line(aes(subidas_laboral_promedio, mediahora))
# Mejor puntos (no se)
ggplot(data) +
geom_point(aes(subidas_laboral_promedio, mediahora))
# Equivocarse es bueno!!!!! (Mientras nadie te pille)
ggplot(data) +
geom_point(aes(x = mediahora, y = subidas_laboral_promedio))
# P: Como lo respondo?
# R:
data %>%
filter(mediahora == hm("8:00"), subidas_laboral_promedio <=1000)
data %>%
filter(mediahora == hm("8:00"), subidas_laboral_promedio <=1000) %>%
count()
df <- data_frame(
la_x = c(2, rep(1, 10)),
la_y = c(1, rep(2, 10))
)
df
ggplot(df) +
geom_point(aes(x = la_x, y = la_y), size = 10)
ggplot(df) +
geom_point(aes(x = la_x, y = la_y), size = 10, alpha = 0.2)
# Apliquemos lo mismo a lo anterior
ggplot(data) +
geom_point(aes(x = mediahora, y = subidas_laboral_promedio), alpha = 0.02, size = 2)
# Podemos mejorar agregando un suaviasmiento con geom_smooth
# Esto intenta hacer una linea que pase cerca de los puntos
ggplot(data) +
geom_point(aes(x = mediahora, y = subidas_laboral_promedio), alpha = 0.02, size = 2) +
geom_smooth(aes(x = mediahora, y = subidas_laboral_promedio))
# Coloriemos los puntos por estacion
ggplot(data) +
geom_point(aes(x = mediahora, y = subidas_laboral_promedio, color = estacion),
alpha = 1, size = 2) +
geom_smooth(aes(x = mediahora, y = subidas_laboral_promedio))
# Muy bien!
# Podemos esconder la legenda con theme(legend.position = "none")
ggplot(data) +
geom_point(aes(x = mediahora, y = subidas_laboral_promedio, color = estacion),
alpha = 1, size = 2) +
geom_smooth(aes(x = mediahora, y = subidas_laboral_promedio)) +
theme(legend.position = "none")
# P: Identifica la hora del peak de ingresos
data %>%
filter(subidas_laboral_promedio == max(subidas_laboral_promedio))data %>%
arrange(desc(subidas_laboral_promedio))
# P: Identifica la hora del peak de ingresos
data %>%
filter(subidas_laboral_promedio == max(subidas_laboral_promedio))
data %>%
arrange(desc(subidas_laboral_promedio))
# Los graficos se pueden modificar e ir guardando las modificaciones
# continuamente
p <- ggplot(data) +
geom_point(aes(x = mediahora, y = subidas_laboral_promedio, color = estacion),
alpha = 1, size = 2) +
geom_smooth(aes(x = mediahora, y = subidas_laboral_promedio)) +
scale_color_viridis_d() +
theme(legend.position = "none")
p
# Pudes guardar un gráfico ggplot como un objeto el cual puedes seguir modificadno
p <- p +
labs(
x = "Hora",
title = "Mi super titulo"
)
p
ggplotly(p)
# Para un poco de magia
library(plotly)
install.packages("plotly")
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("nrand", "Simulaciones",
min = 50, max = 100, value = 70),
selectInput("col", "Color", c("red", "blue", "black")),
checkboxInput("punto", "Puntos:", value = FALSE)
),
mainPanel(plotOutput("outplot"))
)
)
server <- function(input, output) {
output$outplot <- renderPlot({
set.seed(123)
x <- rnorm(input$nrand)
t <- ifelse(input$punto, "b", "l")
plot(x, type = t, col = input$col)
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('Actividades/EjemploShiny.R')
runApp('Actividades/EjemploShiny.R')
?SAheart
runApp('Actividades/EjemploShiny.R')
?shinytheme
runApp('Actividades/EjemploShiny.R')
runApp('Actividades/EjemploShiny.R')
?sidebarLayout
runApp('C:/Users/ruben/Downloads/Hola1')
faithful
?textInput
runApp('C:/Users/ruben/Downloads/Hola1')
runApp('C:/Users/ruben/Downloads/Hola1')
runApp('C:/Users/ruben/Downloads/Hola1')
runApp('C:/Users/ruben/Downloads/Hola1')
?renderText
runApp('C:/Users/ruben/Downloads/Hola1')
?hist
runApp('C:/Users/ruben/Downloads/Hola1')
as.numeric("5.00")
as.numeric("5,00")
as.numeric("5000")
str_remove("5,000 .aprox", c(" .aprox", ",") )
str_remove("5,000 .aprox", c(" .aprox", ",") )
str_remove("5,000 .aprox", c(" .aprox", ",") )
str_remove("5,000 .aprox", "[,.aprox]" )
str_remove("5,000 .aprox", "[, .aprox]" )
as.numeric("50,0")
as.numeric("500")
